{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isInfinitef from '@stdlib/math-base-assert-is-infinitef';\nimport { assign as normalize } from '@stdlib/number-float32-base-normalize';\nimport floatExp from '@stdlib/number-float32-base-exponent';\nimport toWordf from '@stdlib/number-float32-base-to-word';\nimport fromWordf from '@stdlib/number-float32-base-from-word';\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\n// Exponent all 0s: 1 00000000 11111111111111111111111 => 2155872255\nvar CLEAR_EXP_MASK = 0x807fffff>>>0; // asm type annotation\n\n// Exponent equal to 126 (BIAS-1): 0 01111110 00000000000000000000000 => 1056964608\nvar SET_EXP_MASK = 0x3f000000|0; // asm type annotation\n\n// Normalization workspace:\nvar X = [ 0.0, 0.0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Splits a single-precision floating-point number into a normalized fraction and an integer power of two and assigns results to a provided output array.\n*\n* @private\n* @param {number} x - input value\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} output array\n*\n* @example\n* var out = frexpf( 4.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexpf( 0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexpf( -0.0, [ 0.0, 0 ], 1, 0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexpf( NaN, [ 0.0, 0 ], 1, 0 );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexpf( Infinity, [ 0.0, 0 ], 1, 0 );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexpf( -Infinity, [ 0.0, 0 ], 1, 0 );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexpf( x, out, stride, offset ) {\n\tvar word;\n\tvar exp;\n\n\tx = f32( x );\n\tif (\n\t\tx === 0.0 || // handles -0\n\t\tisnanf( x ) ||\n\t\tisInfinitef( x )\n\t) {\n\t\tout[ offset ] = x;\n\t\tout[ offset + stride ] = 0;\n\t\treturn out;\n\t}\n\t// If `x` is subnormal, normalize it...\n\tnormalize( x, X, 1, 0 );\n\n\t// Extract the exponent from `x` and add the normalization exponent:\n\texp = floatExp( X[0] ) + X[ 1 ] + 1;\n\n\t// Convert the normalized floating-point number to an unsigned 32-bit integer:\n\tword = toWordf( X[ 0 ] );\n\n\t// Clear the exponent bits within the word:\n\tword &= CLEAR_EXP_MASK;\n\n\t// Set the exponent bits within the word to BIAS-1 (127-1=126):\n\tword |= SET_EXP_MASK;\n\n\t// Create a new floating-point number:\n\tx = fromWordf( word );\n\n\tout[ offset ] = x;\n\tout[ offset + stride ] = exp;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default frexpf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fcn from './assign.js';\n\n\n// MAIN //\n\n/**\n* Splits a single-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @param {number} x - input value\n* @returns {Array<number>} output array\n*\n* @example\n* var out = frexpf( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* @example\n* var out = frexpf( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* @example\n* var out = frexpf( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* @example\n* var out = frexpf( NaN );\n* // returns [ NaN, 0 ]\n*\n* @example\n* var out = frexpf( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* @example\n* var out = frexpf( -Infinity );\n* // returns [ -Infinity , 0 ]\n*/\nfunction frexpf( x ) {\n\treturn fcn( x, [ 0.0, 0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default frexpf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Split a single-precision floating-point number into a normalized fraction and an integer power of two.\n*\n* @module @stdlib/math-base-special-frexpf\n*\n* @example\n* import frexpf from '@stdlib/math-base-special-frexpf';\n*\n* var out = frexpf( 4.0 );\n* // returns [ 0.5, 3 ]\n*\n* out = frexpf( 0.0 );\n* // returns [ 0.0, 0 ]\n*\n* out = frexpf( -0.0 );\n* // returns [ -0.0, 0 ]\n*\n* out = frexpf( NaN );\n* // returns [ NaN, 0 ]\n*\n* out = frexpf( Infinity );\n* // returns [ Infinity , 0 ]\n*\n* out = frexpf( -Infinity );\n* // returns [ -Infinity , 0 ]\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import frexpf from '@stdlib/math-base-special-frexpf';\n*\n* var out = new Float32Array( 2 );\n*\n* var y = frexpf.assign( 4.0, out, 1, 0 );\n* // returns <Float32Array>[ 0.5, 3 ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["CLEAR_EXP_MASK","SET_EXP_MASK","X","frexpf","x","out","stride","offset","word","exp","f32","isnanf","isInfinitef","normalize","floatExp","toWordf","fromWordf","fcn","setReadOnly","main","assign"],"mappings":";;m1BAkCA,IAAIA,EAAiB,WAGjBC,EAAe,WAGfC,EAAI,CAAE,EAAK,GAuCf,SAASC,EAAQC,EAAGC,EAAKC,EAAQC,GAChC,IAAIC,EACAC,EAGJ,OACO,KAFPL,EAAIM,EAAKN,KAGRO,EAAQP,IACRQ,EAAaR,IAEbC,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAW,EAClBD,IAGRQ,EAAWT,EAAGF,EAAG,EAAG,GAGpBO,EAAMK,EAAUZ,EAAE,IAAOA,EAAG,GAAM,EAGlCM,EAAOO,EAASb,EAAG,IAGnBM,GAAQR,EAMRI,EAAIY,EAHJR,GAAQP,GAKRI,EAAKE,GAAWH,EAChBC,EAAKE,EAASD,GAAWG,EAClBJ,EACR,CCzDA,SAASF,EAAQC,GAChB,OAAOa,EAAKb,EAAG,CAAE,EAAK,GAAK,EAAG,EAC/B,CCSAc,EAAAC,EAAA,SAAAC"}